Resources:
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: ${self:service}-user-pool-${opt:stage, self:provider.stage}
      AliasAttributes:
        - preferred_username
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
          Required: true
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:service}-user-pool-client-${opt:stage, self:provider.stage}
      UserPoolId:
        Ref: UserPool
      GenerateSecret: false

  CognitoTriggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - CustomMessagesLambdaFunction
          - Arn
      Principal: cognito-idp.amazonaws.com