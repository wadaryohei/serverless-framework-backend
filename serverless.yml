# ------------------------------------------
# service
# サービス名を設定
# ------------------------------------------
service: my-serverless-backend


# ------------------------------------------
# plugins
# サービスに必要なプラグインを設定
# ------------------------------------------
plugins:
  - aws-amplify-serverless-plugin
  - serverless-appsync-plugin
  - serverless-plugin-typescript
  - serverless-offline


# ------------------------------------------
# package
# サービスから除外するディレクトリを設定
# ------------------------------------------
package:
  exclude:
    - ./node_modules/**
    - node_modules/**


# ------------------------------------------
# frameworkVersion
# フレームワークのバージョンを設定
# ------------------------------------------
frameworkVersion: '2.0.0'


# ------------------------------------------
# provider
# サービスの基本情報を設定
# ------------------------------------------
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, "dev"}
  region: ap-northeast-1
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    TABLE_POST: ${self:service}-${opt:stage, self:provider.stage}-Post
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*'
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*/*'

    - Effect: Allow
      Action:
        - lambda:*
      Resource:
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:*'

    - Effect: 'Allow'
      Action:
        - 'cognito-idp:*'
      Resource: 'arn:aws:cognito-idp:*'


# ------------------------------------------
# functions
# ラムダで使用する関数を設定
# ------------------------------------------
functions:

  # 初期ファンクション
  hello:
    handler: functions/hello.handler
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: /hello
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: ApiGatewayAuthorizer
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  # ユーザー作成認証する処理
  customMessages:
    handler: functions/cognito.handler
    memorySize: 128
    timeout: 10
    events:
      - cognitoUserPool:
          pool: ${self:service}-user-pool-${opt:stage, self:provider.stage}
          trigger: CustomMessage
          existing: true

# ------------------------------------------
# custom
# カスタムするサービス郡を設定
# ------------------------------------------
custom:
  amplify:
    - filename: ./src/aws-exports.js
      type: javascript
      appClient: UserPoolClient
  appSync:
    name: ${self:service}-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ap-northeast-1
      defaultAction: ALLOW
      region: ap-northeast-1
      userPoolId:
        Ref: UserPool
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
      # ------------------------------------------
      # Queries
      # ------------------------------------------
      -
        type: Query
        field: getPost
        dataSource: Post
      -
        type: Query
        field: listPost
        dataSource: Post

      # ------------------------------------------
      # Mutations
      # ------------------------------------------
      -
        type: Mutation
        field: createPost
        dataSource: Post
      -
        type: Mutation
        field: updatePost
        dataSource: Post
      -
        type: Mutation
        field: deletePost
        dataSource: Post
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Post
        config:
          tableName: ${self:provider.environment.TABLE_POST}
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
          region: ap-northeast-1

# ------------------------------------------
# resources
# サービス郡の詳細リソースを設定
# ------------------------------------------
resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/i-am-role.yml)}
  - ${file(resources/authorizer.yml)}
